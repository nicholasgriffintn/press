// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]

  stripeCustomerId       String?       @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?       @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?       @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?     @map(name: "stripe_current_period_end")
  TenantUser             TenantUser[]
  Device                 Device[]
  Notification           Notification? @relation(fields: [notificationId], references: [id])
  notificationId         String?
  Post                   Post[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Notification {
  id        String   @id @default(cuid())
  payload   Json
  recipents User[]
  siteId    String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  createdBy String?  @map(name: "created_by")
  updatedBy String?  @map(name: "updated_by")

  site Site @relation(fields: [siteId], references: [id])

  @@map(name: "notifications")
}

model AuditLog {
  id             String   @id @default(cuid())
  entityName     String   @db.VarChar(255)
  entityId       String   @db.VarChar(255)
  tenantId       String?
  action         String   @db.VarChar(32)
  createdById    String?
  createdByEmail String?  @db.VarChar(255)
  values         Json?
  timestamp      DateTime @default(now()) @map(name: "created_at")

  @@map(name: "auditlogs")
}

model Provider {
  id        String   @id @default(cuid())
  name      String   @default("default")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  createdBy String?  @map(name: "created_by")
  updatedBy String?  @map(name: "updated_by")
  Tenant    Tenant[]

  @@unique([name])
  @@map(name: "providers")
}

model Tenant {
  id                     String       @id @default(cuid())
  name                   String       @db.VarChar(255)
  url                    String       @db.VarChar(255)
  stripeCustomerId       String?      @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?      @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?      @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?    @map(name: "stripe_current_period_end")
  createdAt              DateTime     @default(now()) @map(name: "created_at")
  updatedAt              DateTime     @default(now()) @map(name: "updated_at")
  createdBy              String       @map(name: "created_by")
  updatedBy              String       @map(name: "updated_by")
  users                  TenantUser[]
  Device                 Device[]
  Site                   Site[]
  providerName           String

  provider Provider @relation(fields: [providerName], references: [name])
  File     File[]

  @@unique([name, url])
  @@map(name: "tenants")
}

enum Role {
  admin
}

model TenantUser {
  id              String   @id @default(cuid())
  invitationToken String   @db.VarChar(255)
  status          String   @db.VarChar(255)
  role            Role
  tenantId        String
  userId          String
  createdAt       DateTime @default(now()) @map(name: "created_at")
  updatedAt       DateTime @default(now()) @map(name: "updated_at")
  createdBy       String   @map(name: "created_by")
  updatedBy       String?  @map(name: "updated_by")

  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@map(name: "tenantusers")
}

model Device {
  id                 String   @id @default(cuid())
  deviceId           String   @db.VarChar(255)
  verificationStatus String   @db.VarChar(255)
  verificationDate   DateTime
  verificationToken  String   @db.VarChar(255)
  verificationExp    String   @db.VarChar(255)
  tenantId           String
  userId             String
  createdAt          DateTime @default(now()) @map(name: "created_at")
  updatedAt          DateTime @default(now()) @map(name: "updated_at")
  createdBy          String   @map(name: "created_by")
  updatedBy          String   @map(name: "updated_by")

  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@map(name: "devices")
}

model File {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(255)
  sizeInBytes Int
  privateUrl  String   @db.VarChar(1024)
  publicUrl   String   @db.VarChar(1024)
  tenantId    String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")
  createdBy   String   @map(name: "created_by")
  updatedBy   String   @map(name: "updated_by")

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@map(name: "files")
}

model Site {
  id String @id @default(cuid())

  name        String
  description String?
  activated   Boolean @default(false)
  url         String?
  email       String?
  twitter     String?
  facebook    String?
  slack       String?
  theme       Json?
  menu        Json?
  widgets     Json?
  language    String  @default("en")
  avatarUrl   String? @db.VarChar(1024)
  logoUrl     String? @db.VarChar(1024)

  tenantId  String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  createdBy String?  @map(name: "created_by")
  updatedBy String?  @map(name: "updated_by")

  tenant        Tenant          @relation(fields: [tenantId], references: [id])
  Content       Content[]
  CloudFlare    CloudFlare[]
  Vercel        Vercel[]
  Compliance    Compliance[]
  Template      Template[]
  Task          Task[]
  Note          Note[]
  ContentStatus ContentStatus[]
  CustomField   CustomField[]
  ContentType   ContentType[]
  Setting       Setting[]
  Integrator    Integrator[]
  Flag          Flag[]
  Deployment    Deployment[]
  Form          Form[]
  Response      Response[]
  Notification  Notification[]
  Workflow      Workflow[]

  @@unique([name, url])
  @@map(name: "sites")
}

enum ThemeOptions {
  default
}

model Setting {
  id                 String       @id @default(cuid())
  theme              ThemeOptions @default(default)
  backgroundImageUrl String       @db.VarChar(1024)
  logoUrl            String       @db.VarChar(1024)
  siteId             String
  createdAt          DateTime     @default(now()) @map(name: "created_at")
  updatedAt          DateTime     @default(now()) @map(name: "updated_at")
  createdBy          String       @map(name: "created_by")
  updatedBy          String       @map(name: "updated_by")

  site Site @relation(fields: [siteId], references: [id])

  @@map(name: "settings")
}

enum FlagStatus {
  on
  off
}

model Flag {
  id        String     @id @default(cuid())
  name      String     @unique
  status    FlagStatus @default(off)
  siteId    String
  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime   @default(now()) @map(name: "updated_at")
  createdBy String?    @map(name: "created_by")
  updatedBy String?    @map(name: "updated_by")

  site Site @relation(fields: [siteId], references: [id])

  @@map(name: "falgs")
}

model Integrator {
  id          String   @id @default(cuid())
  accessToken String
  secretKey   String
  expiry      DateTime
  roles       Role
  siteId      String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")
  createdBy   String   @map(name: "created_by")
  updatedBy   String   @map(name: "updated_by")

  site Site @relation(fields: [siteId], references: [id])

  @@map(name: "integrators")
}

model CloudFlare {
  id         String   @id @default(cuid())
  siteId     String
  email      String
  apiKey     String
  accountId  String
  pages      Boolean  @default(false)
  pagesName  String
  analytics  Boolean  @default(false)
  dnsEditing Boolean  @default(false)
  dnsReadKey String
  dnsEditKey String
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")
  createdBy  String   @map(name: "created_by")
  updatedBy  String   @map(name: "updated_by")

  site Site @relation(fields: [siteId], references: [id])

  @@map(name: "cloudflare")
}

model Vercel {
  id        String   @id @default(cuid())
  siteId    String
  apiKey    String
  teamId    String
  appName   String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  createdBy String?  @map(name: "created_by")
  updatedBy String?  @map(name: "updated_by")

  site Site @relation(fields: [siteId], references: [id])

  @@map(name: "vercel")
}

enum DeploymentStatus {
  pending
  in_progress
  complete
}

model Deployment {
  id        String           @id @default(cuid())
  status    DeploymentStatus
  record    Json
  publshed  DateTime
  siteId    String
  createdAt DateTime         @default(now()) @map(name: "created_at")
  updatedAt DateTime         @default(now()) @map(name: "updated_at")
  createdBy String?          @map(name: "created_by")
  updatedBy String?          @map(name: "updated_by")

  site Site @relation(fields: [siteId], references: [id])

  @@map(name: "deployment")
}

enum FormProvider {
  press
}

model Form {
  id        String       @id @default(cuid())
  provider  FormProvider
  private   Boolean      @default(true)
  json      Json
  key       String
  revision  Int
  siteId    String
  createdAt DateTime     @default(now()) @map(name: "created_at")
  updatedAt DateTime     @default(now()) @map(name: "updated_at")
  createdBy String?      @map(name: "created_by")
  updatedBy String?      @map(name: "updated_by")

  site     Site       @relation(fields: [siteId], references: [id])
  Response Response[]

  @@map(name: "forms")
}

model Response {
  id        String   @id @default(cuid())
  payload   Json
  form      Form     @relation(fields: [formId], references: [id])
  siteId    String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  createdBy String?  @map(name: "created_by")
  updatedBy String?  @map(name: "updated_by")

  site   Site   @relation(fields: [siteId], references: [id])
  formId String

  @@map(name: "responses")
}

enum CustomFieldType {
  input
  textarea
  dropdown
  radio
}

model CustomField {
  id           String          @id @default(cuid())
  label        String
  defaultValue String
  type         CustomFieldType
  siteId       String
  createdAt    DateTime        @default(now()) @map(name: "created_at")
  updatedAt    DateTime        @default(now()) @map(name: "updated_at")
  createdBy    String          @map(name: "created_by")
  updatedBy    String          @map(name: "updated_by")

  site          Site         @relation(fields: [siteId], references: [id])
  Template      Template?    @relation(fields: [templateId], references: [id])
  templateId    String?
  ContentType   ContentType? @relation(fields: [contentTypeId], references: [id])
  contentTypeId String?

  @@map(name: "customfields")
}

model Template {
  id              String        @id @default(cuid())
  name            String
  showPreview     Boolean       @default(false)
  useVisualEditor Boolean       @default(false)
  json            Json
  siteId          String
  customFields    CustomField[]
  createdAt       DateTime      @default(now()) @map(name: "created_at")
  updatedAt       DateTime      @default(now()) @map(name: "updated_at")
  createdBy       String        @map(name: "created_by")
  updatedBy       String?       @map(name: "updated_by")

  site    Site      @relation(fields: [siteId], references: [id])
  Content Content[]

  @@map(name: "templates")
}

model Task {
  id        String   @id @default(cuid())
  siteId    String
  title     String
  content   String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  createdBy String?  @map(name: "created_by")
  updatedBy String?  @map(name: "updated_by")

  site      Site     @relation(fields: [siteId], references: [id])
  Content   Content? @relation(fields: [contentId], references: [id])
  contentId String?

  @@map(name: "tasks")
}

model Note {
  id        String   @id @default(cuid())
  siteId    String
  title     String
  content   String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  createdBy String?  @map(name: "created_by")
  updatedBy String?  @map(name: "updated_by")

  site      Site     @relation(fields: [siteId], references: [id])
  Content   Content? @relation(fields: [contentId], references: [id])
  contentId String?

  @@map(name: "notes")
}

model ContentStatus {
  id            String   @id @default(cuid())
  siteId        String
  name          String   @unique
  color         String
  publish       Boolean  @default(false)
  archive       Boolean  @default(false)
  pendingReview Boolean  @default(false) @map("pending_review")
  scheduled     Boolean  @default(false)
  order         Int?
  global        Boolean  @default(false)
  roles         Role
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @default(now()) @map(name: "updated_at")
  createdBy     String   @map(name: "created_by")
  updatedBy     String   @map(name: "updated_by")

  site    Site      @relation(fields: [siteId], references: [id])
  Content Content[]

  @@map(name: "contentstatuses")
}

model ContentType {
  id           String        @id @default(cuid())
  title        String
  slug         String
  global       Boolean       @default(false)
  icon         String?
  customFields CustomField[]
  siteId       String
  createdAt    DateTime      @default(now()) @map(name: "created_at")
  updatedAt    DateTime      @default(now()) @map(name: "updated_at")
  createdBy    String        @map(name: "created_by")
  updatedBy    String        @map(name: "updated_by")

  site    Site      @relation(fields: [siteId], references: [id])
  Content Content[]

  @@map(name: "contenttypes")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  authorId  String

  author User @relation(fields: [authorId], references: [id])

  @@map(name: "posts")
}

model Content {
  id String @id @default(cuid())

  title            String
  dueDate          DateTime?      @map(name: "due_date")
  publishDate      DateTime?      @map(name: "publish_date")
  content          Json?
  customFieldsData Json?          @map("custom_fields_data")
  readOnly         Boolean        @default(false) @map(name: "read_only")
  published        Boolean        @default(false)
  private          Boolean        @default(false)
  draft            Boolean        @default(false)
  showInMenu       Boolean        @default(false) @map("show_in_menu")
  seo              Json?
  authorId         String
  siteId           String
  featuredImageUrl String?        @db.VarChar(1024)
  status           ContentStatus @relation(fields: [contentStatusId], references: [id])
  type             ContentType   @relation(fields: [contentTypeId], references: [id])

  site         Site        @relation(fields: [siteId], references: [id])
  Compliance   Compliance[]
  notes        Note[]
  tasks        Task[]
  template     Template?    @relation(fields: [templateId], references: [id])
  templateId   String?
  contributors Json

  createdAt       DateTime @default(now()) @map(name: "created_at")
  updatedAt       DateTime @default(now()) @map(name: "updated_at")
  createdBy       String   @map(name: "created_by")
  updatedBy       String?  @map(name: "updated_by")
  contentStatusId String
  contentTypeId   String

  @@map(name: "content")
}

enum WorkflowStatement {
  if
  else
  else_if
}

enum WorkflowCompare {
  task
  template
  parent
  contributors
  publish_date
  show_in_menu
}

enum WorkflowCondition {
  equal
  not_equal
  more_than
  less_than
  less_than_or_equal
  more_than_or_equal
}

enum WorkflowOutcome {
  restrict_publish
  restrict_save
}

model Workflow {
  id        String            @id @default(cuid())
  statement WorkflowStatement
  compare   WorkflowCompare
  condition WorkflowCondition
  value     String
  outcome   WorkflowOutcome
  siteId    String
  createdAt DateTime          @default(now()) @map(name: "created_at")
  updatedAt DateTime          @default(now()) @map(name: "updated_at")
  createdBy String?           @map(name: "created_by")
  updatedBy String?           @map(name: "updated_by")

  site Site @relation(fields: [siteId], references: [id])

  @@map(name: "workflows")
}

enum ComplianceStatus {
  untracked
  pending
  past_review
  due_for_review
  compliant
}

enum Priority {
  P1
  P2
  P3
  P4
  P5
}

model Compliance {
  id        String           @id @default(cuid())
  name      String
  status    ComplianceStatus @default(untracked)
  priotity  Priority         @default(P3)
  reviewed  DateTime?
  freqency  Int              @default(365)
  siteId    String
  contentId String
  createdAt DateTime         @default(now()) @map(name: "created_at")
  updatedAt DateTime         @default(now()) @map(name: "updated_at")
  createdBy String?          @map(name: "created_by")
  updatedBy String?          @map(name: "updated_by")

  site    Site    @relation(fields: [siteId], references: [id])
  content Content @relation(fields: [contentId], references: [id])

  @@map(name: "compliances")
}
